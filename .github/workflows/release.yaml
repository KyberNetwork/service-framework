name: 'Release'

# Check that your service repo is private if this service-framework repo is also private
# Sample permissions config:
# permissions: write-all

on:
  workflow_call:
    inputs:
      cluster:
        type: string
        default: core
      service:
        type: string
        required: true
      service_name:
        type: string
        required: true
      version:
        description: 'Release version'
        type: string
        required: true

env:
  IMAGE_REGISTRY: asia.gcr.io

jobs:
  release:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
      - name: prepare
        id: prepare
        env:
          IMAGE_REPOSITORY: ${{ env.IMAGE_REGISTRY }}/kyber-operation/${{ inputs.cluster }}/${{ inputs.service }}
          INPUT_TAG: ${{ github.event.inputs.version }}
        run: |
          #!/bin/bash
          TAG=${INPUT_TAG#v}
          echo "version_tag=v$TAG" >> $GITHUB_OUTPUT
          echo "build_date=$(date +%FT%T%z)" >> $GITHUB_OUTPUT
          echo "image_repository=${IMAGE_REPOSITORY}" >> $GITHUB_OUTPUT
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v2
        with:
          registry: ${{ env.IMAGE_REGISTRY }}
          username: _json_key
          password: ${{ secrets.GCR_CREDENTIALS }}
      - uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          build-args: |
            VERSION=${{ steps.prepare.outputs.version_tag }}
            GIT_HASH=${{ github.sha }}
            BUILD_DATE=${{ steps.prepare.outputs.build_date }}
            GH_USER=kyber-ci-bot
          labels: |
            kyber.network.schema-version=1.0
            kyber.network.vcs-ref=${{ github.sha }}
            kyber.network.version=${{ steps.prepare.outputs.version_tag }}
            kyber.network.name=${{ inputs.service }}
          tags: |
            ${{ steps.prepare.outputs.image_repository }}:latest
            ${{ steps.prepare.outputs.image_repository }}:${{ steps.prepare.outputs.version_tag }}
          secrets: |
            "gh_pat=${{ secrets.GH_PAT }}"
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Create tag
        env:
          VERSION_TAG: ${{ steps.prepare.outputs.version_tag }}
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
          git tag -d "$VERSION_TAG" 2> /dev/null || echo "Release tag '$VERSION_TAG' does NOT exist"
          git tag --annotate --message "${{ inputs.service }} $VERSION_TAG" "$VERSION_TAG"
          git push origin "refs/tags/$VERSION_TAG"
      - uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.GH_PAT }}
          tag_name: ${{ steps.prepare.outputs.version_tag }}
          name: "${{ inputs.service_name }} ${{ steps.prepare.outputs.version_tag }}"
